<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>divan&#39;s blog</title>
    <link>https://divan.github.io/</link>
    <description>Recent content on divan&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Dec 2018 16:55:00 +0200</lastBuildDate>
    
	<atom:link href="https://divan.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fountain codes and animated QR</title>
      <link>https://divan.github.io/posts/fountaincodes/</link>
      <pubDate>Sat, 01 Dec 2018 16:55:00 +0200</pubDate>
      
      <guid>https://divan.github.io/posts/fountaincodes/</guid>
      <description>(source: Anders Sune Berg)
In the previous article I&amp;rsquo;ve described a weekend project called txqr for unidirectional data transfer using animated sequence of QR codes. The straightforward approach was to repeat the encoded sequence over and over until the receiver gets complete data. This simple repetition code was good enough for starter and trivial to implement, but also introduced long delays in case the receiver missed at least one frame.</description>
    </item>
    
    <item>
      <title>Animated QR data transfer with Gomobile and Gopherjs</title>
      <link>https://divan.github.io/posts/animatedqr/</link>
      <pubDate>Sun, 18 Nov 2018 11:55:00 +0100</pubDate>
      
      <guid>https://divan.github.io/posts/animatedqr/</guid>
      <description>TL;DR: a weekend project for transferring data via animated QR codes, written in Go. The Go code is reused for mobile apps using Gomobile, and in a web application for automating testing QR codes parameters, built with GopherJS and Vecty framework.
I&amp;rsquo;ll share my experience building it, some code and benchmark results of using animated QR as a data transfer method.
The problem One day I was trying to find a viable solution for the following scenario:</description>
    </item>
    
    <item>
      <title>WakeMeUpInTheMiddleOfTheNight log level</title>
      <link>https://divan.github.io/posts/wakemeupinthemiddleofthenight/</link>
      <pubDate>Fri, 26 May 2017 12:55:00 +0100</pubDate>
      
      <guid>https://divan.github.io/posts/wakemeupinthemiddleofthenight/</guid>
      <description>On the last Golang Barcelona meetup we decided to try new format of conversation and after the talk started open discussion on logging, tracing and metrics. The idea was to encourage people to read a very nice blog post by Peter Bourgon on this subject - &amp;ldquo;Metrics, Tracing and Logging&amp;rdquo; and discuss it in a free format.
It went surprisingly well, and while most of the people were conscious about the topic, one thing seemed to be still confusing - what to log and when.</description>
    </item>
    
    <item>
      <title>Misusing error interface</title>
      <link>https://divan.github.io/posts/misusing_error_interface/</link>
      <pubDate>Wed, 08 Mar 2017 12:07:40 +0100</pubDate>
      
      <guid>https://divan.github.io/posts/misusing_error_interface/</guid>
      <description>I used to think that misunderstanding interfaces in Go can lead, at most, to not very readable code and worse maintainability. From my observations misusing interfaces becomes visible usually during refactorings, where you questioning what this type or abstraction actually represents. But, at least, the code tends to work and it&amp;rsquo;s not buggy.
The bug But here is the interesting piece of code that actually was buggy:
err := SomeFunc() if _, ok := err.</description>
    </item>
    
    <item>
      <title>How to avoid Go gotchas</title>
      <link>https://divan.github.io/posts/avoid_gotchas/</link>
      <pubDate>Fri, 04 Nov 2016 13:25:35 +0100</pubDate>
      
      <guid>https://divan.github.io/posts/avoid_gotchas/</guid>
      <description>TL;DR by learning internals  a gotcha is a valid construct in a system, program or programming language that works as documented but is counter-intuitive and almost invites mistakes because it is both easy to invoke and unexpected or unreasonable in its outcome (source: wikipedia)
 Go programming language has some gotchas and there is a number of good articles explaining them. I find those articles very important, especially for the newcomers in Go, as I see people run into those gotchas every now and then.</description>
    </item>
    
    <item>
      <title>My GopherCon experience</title>
      <link>https://divan.github.io/posts/gophercon16/</link>
      <pubDate>Wed, 03 Aug 2016 19:28:46 +0200</pubDate>
      
      <guid>https://divan.github.io/posts/gophercon16/</guid>
      <description>A couple of weeks ago I gave a talk at the largest Go conference, GopherCon, in Denver. It was the first time I attended GopherCon at all, and the first time ever I spoke in English in front of 1400+ people, and it was an absolutely incredible experience. Here is my story.
My journey to GopherCon started on a cold winter day in the apartments in the center of Odessa, Ukraine, where I was living at that time.</description>
    </item>
    
    <item>
      <title>go get for private repos in docker</title>
      <link>https://divan.github.io/posts/go_get_private/</link>
      <pubDate>Wed, 01 Jun 2016 19:28:46 +0200</pubDate>
      
      <guid>https://divan.github.io/posts/go_get_private/</guid>
      <description>As Go community slowly moving towards established and well understood patterns and practices of dependency management, there are still some confusing moments. One of them is automating repeatable build process using containers along with using dependencies in private repositories.
Private repositories on Github are often is a source of confusion when using go get, but it has easy workaround by adding two lines to your .gitconfig:
[url &amp;quot;git@github.com:&amp;quot;] insteadOf = https://github.</description>
    </item>
    
    <item>
      <title>LeftPad and Go: can tooling help?</title>
      <link>https://divan.github.io/posts/leftpad_and_go/</link>
      <pubDate>Thu, 31 Mar 2016 04:30:29 +0300</pubDate>
      
      <guid>https://divan.github.io/posts/leftpad_and_go/</guid>
      <description>You&amp;rsquo;ve probably heard that story about NPM community and LeftPad package, that broke thousands JavaScript projects worldwide. There was a nice follow-up article titled &amp;ldquo;Have We Forget How To Program&amp;rdquo; and one guy even created left-pad.io - Left-Pad As A Service web service. People got a lot of fun discussing this story.
I personally find this story amazing, because there is no single point of failure, but rather a set of things and coincidences resulted in a disaster.</description>
    </item>
    
    <item>
      <title>Visualizing Concurrency in Go</title>
      <link>https://divan.github.io/posts/go_concurrency_visualize/</link>
      <pubDate>Sun, 24 Jan 2016 18:31:12 -0300</pubDate>
      
      <guid>https://divan.github.io/posts/go_concurrency_visualize/</guid>
      <description>If you prefer video over blog posts, here is my talk on this at GopherCon 2016: https://www.youtube.com/watch?v=KyuFeiG3Y60
One of the strongest sides of Go programming language is a built-in concurrency based on Tony Hoare&amp;rsquo;s CSP paper. Go is designed with concurrency in mind and allows us to build complex concurrent pipelines. But have you ever wondered - how various concurrency patterns look like?
Of course, you have. We&amp;rsquo;re all thinking mostly by visualization in one form or another.</description>
    </item>
    
    <item>
      <title>How to complain about Go</title>
      <link>https://divan.github.io/posts/go_complain_howto/</link>
      <pubDate>Mon, 14 Dec 2015 08:36:54 -0300</pubDate>
      
      <guid>https://divan.github.io/posts/go_complain_howto/</guid>
      <description>Over the years of existence of Go programming language, the articles with its critique was always popular, bringing a lot of discussion from both sides. Recently, Maksim Kochkin even created GitHub repo with curated list of articles complaining about golang&amp;rsquo;s imperfection.
So, is it true that ranting about Go flaws is a trend nowadays? With carefully gathered links in the repository above, we can check this! :) Unfortunately, there are only 17 articles in the list, which is a bit disappointing because it&amp;rsquo;s not enough for fine statistical analysis, but we can use this anyway.</description>
    </item>
    
    <item>
      <title>Integration testing in Go using Docker</title>
      <link>https://divan.github.io/posts/integration_testing/</link>
      <pubDate>Mon, 07 Dec 2015 08:36:54 -0700</pubDate>
      
      <guid>https://divan.github.io/posts/integration_testing/</guid>
      <description>Note: this post was originally written for the Go Advent 2015 series, but I discovered that a post with almost exactly the same subject (and even similar code!) already planned :) That&amp;rsquo;s amazing.
Golang is often used for writing microservices and various backends. Often these type of software do some computation, read/write data on external storage and expose it&amp;rsquo;s API via http handlers. All this functionality is remarkably easy to implement in Go and, especially if you&amp;rsquo;re creating 12factor-compatible app, Go is your friend here.</description>
    </item>
    
    <item>
      <title>ISU Events Statistics</title>
      <link>https://divan.github.io/posts/20151128_isu_stats/</link>
      <pubDate>Sat, 28 Nov 2015 08:36:54 -0700</pubDate>
      
      <guid>https://divan.github.io/posts/20151128_isu_stats/</guid>
      <description>Intro Have you ever wondered how many quads where executed in all ISU competitions ever? Or, maybe, which throw in pair skating is most problematic? Perhaps, you want to see statistics for skaters of your nation, or even, you have skills in statistical analysis and want to have nice diagrams on ISU results of overall time?
Well, I may have a solution for you.
Since when Judgement System was introduced, it was really nice to have detailed scores and points, which can be easily analyzed by human.</description>
    </item>
    
    <item>
      <title>Explaining Go error handling</title>
      <link>https://divan.github.io/posts/go_errors/</link>
      <pubDate>Mon, 02 Nov 2015 08:36:54 -0700</pubDate>
      
      <guid>https://divan.github.io/posts/go_errors/</guid>
      <description>I recently translated great article — Errors are values by Rob Pike — and we discussed it in our podcast Golangshow (in russian). One thing I was surprised about is that even experienced Go developers sometimes do not understand the core idea of that article.
Looking back, I remember my first impressions when I read it for the first time. It was similar to “It looks like Pike just adds some complexity to what could’ve been solved gracefully with exceptions”.</description>
    </item>
    
  </channel>
</rss>